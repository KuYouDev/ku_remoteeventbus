//apply plugin: 'com.github.dcendents.android-maven'

ext {
    //作者
    projectMainAuthorName = "KuYou"

    //硬件平台
    //u代表 Universal[通用]
    //m代表 MultiPlatform[多平台，但不全通用]
    //特定项目名称代表专用 
    projectHardwareName = "m"

    //多模块统一日期版本
    versionDatePattern = "yyyyMMdd_HHmm"
    versionDate = new Date().format("${versionDatePattern}")

    //密钥相关
    KeyStoreFllePath = System.getenv("ANDROID_KEY_STORE_FLLE_PATH")
    KeyStorePassword = System.getenv("ANDROID_KEY_STORE_PASSWORD")
    KeyAlias = System.getenv("ANDROID_KEY_ALIAS")
    KeyPassword = System.getenv("ANDROID_KEY_PASSWORD")

    //混淆
    isConfuse = false
}

task createProguardDictionary {
    setGroup('kuyou')
    setDescription('task study')

    outputs.file(rootProject.rootDir.path + '/build/dictionary.txt')
    doLast {
        println "-------------------------> create proguard-keys <-------------------------"
        def r = new Random()
        def start = r.nextInt(300) + 0x2000
        def end = start + 0x2000 // 如果字典太大了，可以将start~end范围缩小
        def chars = (start..end)
                .findAll { Character.isValidCodePoint(it) && Character.isJavaIdentifierPart(it) }
                .collect { String.valueOf(Character.toChars(it)) }
        int max = chars.size()
        def startChars = []
        def dict = []
        // 筛选可用作java标识符开头的char
        for (int i = 0; i < max; i++) {
            char c = chars.get(i).charAt(0)
            if (Character.isJavaIdentifierStart(c)) {
                startChars << String.valueOf(c)
            }
        }
        def startSize = startChars.size()
        // 打乱顺序
        Collections.shuffle(chars, r)
        Collections.shuffle(startChars, r)
        // 拼两个char为一个词，让字典更丰富
        for (int i = 0; i < max; i++) {
            def m = r.nextInt(startSize - 3)
            def n = m + 3
            (m..n).each { j ->
                dict << (startChars.get(j) + chars.get(i))
            }
        }

        def f = outputs.files.getSingleFile()
        f.getParentFile().mkdirs()
        f.withWriter("UTF-8") {
            it.write(startChars.join(System.lineSeparator()))
            it.write(dict.join(System.lineSeparator()))
        }
    }
}

task copyProguardDictionary(type: Copy) {
    setGroup('kuyou')
    setDescription('task study')
    dependsOn rootProject.tasks.createProguardDictionary
    println "-------------------------> copy proguard-keys <-------------------------"
    println project.getBuildDir()
    from rootProject.rootDir.path + '/build/dictionary.txt'
    into project.getBuildDir().path + "/outputs/apk/proguard"
}

//插入混淆字典文件
project.tasks.whenTaskAdded { Task theTask ->
    if (theTask.name.startsWith("assemble") | theTask.name.startsWith("install")) {
        theTask.dependsOn(copyProguardDictionary)
        theTask.mustRunAfter(copyProguardDictionary)
    }
}

def getBuildType() {
    def buildType = "debug"
    if (isBuildTypeRelease()) {
        buildType = "release"
    }
    return "${buildType}";
}

boolean isBuildTypeRelease() {
    for (String s : gradle.startParameter.taskNames) {
        if (s.contains("Release") | s.contains("release")) {
            return true
        }
    }
    return false
}

def getVersionCodeRelease() {
    int aa = 1
    int bb = 0
    Process process = "git rev-list --count HEAD".execute()
    process.waitFor()
    int cccc = process.getText().toInteger()
    return aa * 1000000 + bb * 10000 + cccc
}

def getVersionCode() {
    def versionCodeRelease = getVersionCodeRelease()
    println "-------------------------> versionCodeRelease = " + versionCodeRelease
    return isBuildTypeRelease() ? versionCodeRelease : 1
}

ext {
    getVersionCode = this.&getVersionCode
    getBuildType = this.&getBuildType
}